// Generated by Xata Codegen 0.21.0. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "Podcasts",
    columns: [
      { name: "title", type: "string" },
      { name: "image", type: "string" },
      { name: "twitterHandle", type: "string" },
    ],
    revLinks: [{ column: "podcast", table: "PodcastEpisodes" }],
  },
  {
    name: "PodcastEpisodes",
    columns: [
      { name: "podcast", type: "link", link: { table: "Podcasts" } },
      { name: "title", type: "string" },
    ],
    revLinks: [{ column: "podcastEpisode", table: "PodcastEpisodeNotes" }],
  },
  {
    name: "PodcastEpisodeNotes",
    columns: [
      { name: "createdAt", type: "datetime" },
      {
        name: "podcastEpisode",
        type: "link",
        link: { table: "PodcastEpisodes" },
      },
      { name: "text", type: "text" },
    ],
  },
  {
    name: "Notes",
    columns: [
      { name: "text", type: "text" },
      { name: "createdAt", type: "datetime" },
    ],
  },
  {
    name: "Books",
    columns: [
      { name: "title", type: "string" },
      { name: "author", type: "string" },
    ],
    revLinks: [{ column: "book", table: "BookHighlights" }],
  },
  {
    name: "BookHighlights",
    columns: [
      { name: "text", type: "text" },
      { name: "note", type: "text" },
      { name: "book", type: "link", link: { table: "Books" } },
      { name: "highlightedAt", type: "datetime" },
      { name: "lastSyncedAt", type: "datetime" },
      { name: "lastUpdatedAt", type: "datetime" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Podcasts = InferredTypes["Podcasts"];
export type PodcastsRecord = Podcasts & XataRecord;

export type PodcastEpisodes = InferredTypes["PodcastEpisodes"];
export type PodcastEpisodesRecord = PodcastEpisodes & XataRecord;

export type PodcastEpisodeNotes = InferredTypes["PodcastEpisodeNotes"];
export type PodcastEpisodeNotesRecord = PodcastEpisodeNotes & XataRecord;

export type Notes = InferredTypes["Notes"];
export type NotesRecord = Notes & XataRecord;

export type Books = InferredTypes["Books"];
export type BooksRecord = Books & XataRecord;

export type BookHighlights = InferredTypes["BookHighlights"];
export type BookHighlightsRecord = BookHighlights & XataRecord;

export type DatabaseSchema = {
  Podcasts: PodcastsRecord;
  PodcastEpisodes: PodcastEpisodesRecord;
  PodcastEpisodeNotes: PodcastEpisodeNotesRecord;
  Notes: NotesRecord;
  Books: BooksRecord;
  BookHighlights: BookHighlightsRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Andriy-Pashynnyk-s-workspace-0j5g5v.eu-west-1.xata.sh/db/notas-meas",
  branch: "main",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
